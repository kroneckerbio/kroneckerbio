# Example model for testing import code

# Note that blank lines and lines beginning with "#" are ignored

# A Kronecker model is divided into six sections:
# Units, Compartments, Species, Outputs, Parameters, and Reactions

# Units is not yet implemented in Kronecker so don't worry about. Talk to
# David about how to volunteer to write the code for this section if you
# need it.

# For the rest of the sections, it does not matter what order they are in. 
# In fact, you are allowed to have multiple sections by the same name. Each
# section is started by a line starting with a "%". The next word tells
# what kind of section you are starting (Compartments, etc). The section
# identifier is not case sensitive (compartments or cOmParTmEnts works 
# fine too). For some section headers, more words can follow the identifier
# that provide important parameters for that section.

# As a general rule, fields are seperated by arbitrary amounts of
# whitespace. Commas group multiple words into a single field.

# The next line declares that I am going to define the compartments for my
# system. The whitespace between "%" and "Compartments" is optional. The
# next word following Compartments provides the name of the model. It is 
# like saying that the compartments are members of this model.
% Compartments Testing

# Lines of the compartment section follow this format:
#Name  Dim  Volume
v1     3    1e-6 # comments that appear after a '#' are ignored
v2     2    1.2e-4
v3     1    1e-3
  
# Compartment volumes can be a constant term plus a linear combination of
#   states and inputs
v4     3    1 x1=1.2 u1=1.3

# As it stands right now, names can be arbitrary strings. You should avoid 
# starting the name with
# a "%", a "#", or other operator for reasons that should be obvious. The
# Dimension of a comparment is whether the compartment is a point, a line,
# an area, or a space. The volume is the size of the compartment.

# The Species header (starting with a "%") declares that we are no longer 
# defining compartments, but species now. The important word is "States"
# here, not case sensitive. The word following Species defines the
# comparment. Every species must be placed in a compartment and it must be 
# declared in the States header.

% States v1

# The format is:
#Name  InitialAmount
x1  1e4

# The name of species is species. Here, the species is 
# being place in comparment v1. Compartment v1 does not need to be defined
# yet, but it will have to be defined somewhere before you finalize the 
# model.

# The value is the initial amount of the species, not the concentration.
# The default amount is 0, so a species can be defined with just a name.
x2

# The initial amount can also be a seed parameter allowing to be fit as
# part of the model or the experimental conditions
x3  s1
x4  s2

# The initial amount can be a linear combination of seed parameters. Seeds are
# separated by spaces, with default coefficient 1
x5  s1 s2

# Non-unity coefficients for seeds can be set with an equals sign. Make sure
# there are no spaces between the seed and coefficient. Also, a constant term
# can be added.
x6  s1=1.4 s2=1.5 1.6

% States v2
x7 

% States v3
x8 1

# The Inputs header (starting with a "%") is the same as the Staes header
# because inputs are assigned to compartments just like states

% Inputs v1

# The input can be time varying and have parameters that govern its
# behavior. However, these cannot be specified via and model and must be 
# supplied via an experiment. A default value for the input can be
# provided.
# Name Default
u4     2
u5     5

# Output headers do not take any additional parameters
% Outputs

# Format:
#Name Value
y1    x1=1

# Value is a set of species names combined with equal signs and 
# numbers, seperated by spaces. The default number is 1, so the following 
# is identical to the previous line.
# y1 x1

# Multiple expressions can contribute to the same output.
y2 x1 x2
y3 x4 u5

# Values don't have to be 1
y4 x3=1.2

# Multiple non-unity values are allowed. Also, a constant term can be added.
y5 x1=1.5 x2=2.5 3.5 # this is a comment

# The Parameters section is the simplest section. There are no additional
# parameters in the header.
% Parameters
#Name Value
k1    1
k2    1.3e-4

# The Seeds section is just as simple as the Parameters. There are no additional
# parameters in the header.
% Seeds
#Name Value
s1    1e6
s2    20

# The Reactions section takes no additional parameters. The format of the 
# Reactions section is as follows.
% Reactions v1
#Reac1 Reac2 Prod1 Prod2 ParaFwd ParaRev Names
x1     x2    x3    x4    k1      k2      r1 r2

# Up to two names can be given for a reaction here, if two are given, the 
# first applies to the forward and the second applies to the reverse.
# Unlike other components of a Kronecker model, reactions do not have to 
# have unique names, or even names at all. They exist only for ease of use
# and modifying the model after it has been constructed.

# Unimolecular reactions can be defined by putting a 0 in the non-existant
# reactions or products
x1     0      x2   0     k2       k1

# It is not necessary to provide both a reverse and forward parameter. 
# Irreversible reactions are defined like this.
x3    u5     0     0     k1         0    r35

# Species in different compartment may react with each other.
x3 x7 x2 x2 k1 k1 r5 r6

# The rate parameters can also be modified with * for a specific reaction.
# There are complicated reasons for this, but it isn't used much.
x1 x2 x3 x4 k1=2 k2=1/2
